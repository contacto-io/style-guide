{"version":3,"file":"index.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Icon/index.js","../src/components/Button/index.js","../src/components/Typography/TEXT_TYPES.js","../src/components/Typography/index.js","../src/components/Textfield/index.js","../src/components/Card/index.js","../src/components/Checkbox/index.js","../src/components/Tag/index.js","../src/components/Radio/index.js","../src/components/Select/index.js","../src/components/Table/index.js","../src/components/TableLayout/index.js","../src/components/Sider/index.js","../src/components/Block/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.scss'\n\nconst Loading = ({ size = 24, strokeSize = 2, color = 'gray-2' }) => {\n  return (\n    <span\n      className=\"sg contacto-loader\"\n      style={{\n        width: size,\n        height: size,\n        boxShadow: `0 0 0 ${strokeSize}px var(--${color}) inset`,\n      }}\n    ></span>\n  )\n}\n/**\n * Google Icons that are used in the application.\n *\n * Please visit https://fonts.google.com/icons to find different icons and their names\n */\nexport const Icon = ({ className = '', name, size, color, style, hoverColor, ...props }) => {\n  const [iconColor, setIconColor] = useState(color ? `var(--${color})` : undefined)\n  let iconEventProps = {}\n  if (color && hoverColor) {\n    iconEventProps = {\n      onMouseEnter: () => setIconColor(`var(--${hoverColor})`),\n      onMouseLeave: () => setIconColor(`var(--${color})`),\n    }\n  }\n  return (\n    <span\n      className={['sg contacto-icon', 'material-icons-round', className].join(' ')}\n      style={{\n        ...style,\n        color: iconColor,\n        fontSize: size,\n        cursor: hoverColor && 'pointer',\n        overflow: 'hidden',\n        maxHeight: size,\n        maxWidth: size,\n        lineHeight: 1,\n      }}\n      {...props}\n      {...iconEventProps}\n    >\n      {name}\n    </span>\n  )\n}\n\nIcon.Loading = Loading\n\nIcon.propTypes = {\n  /**\n   * Class to be added\n   */\n  className: PropTypes.string,\n  /**\n   * Name of the icon taken from https://fonts.google.com/icons\n   */\n  name: PropTypes.string,\n  /**\n   * Size of the icon in pixels. If its 24x24 enter 24.\n   */\n  size: PropTypes.number,\n  /**\n   * Color is usuall inherited from the parent.\n   * If you want specific color, enter the variable name of the color.\n   *\n   * The variable names can be found here -\n   * https://samuellawerentz.github.io/style-guide/?path=/docs/colors-color-palette--page\n   */\n  color: PropTypes.string,\n  /**\n   * Color to be applied when the icon is hovered. It should be a variable name.\n   */\n  hoverColor: PropTypes.string,\n  style: PropTypes.object,\n}\n\nIcon.defaultProps = {\n  name: 'emoji_emotions',\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button as AntButton } from 'antd'\nimport { Icon } from '../Icon/index'\nimport './button.scss'\nexport const BUTTON_TYPES = [\n  'primary',\n  'secondary',\n  'secondary-gray',\n  'danger-primary',\n  'danger-secondary',\n  'link',\n  'link-danger',\n  'table-action-link',\n]\n\nexport const getButtonClassName = (\n  type,\n  size = 'default',\n  icon,\n  className,\n  onlyIcon,\n  fullWidth,\n  align,\n) => {\n  return [\n    'sg',\n    'cnto-btn',\n    'contacto-button',\n    type ? `contacto-button--${type}` : '',\n    size ? `contacto-button--${size}` : '',\n    icon ? `contacto-button--with-icon` : '',\n    onlyIcon ? 'contacto-button--only-icon' : '',\n    fullWidth ? 'contacto-button--full-width' : '',\n    align ? `contacto-button--${align}` : '',\n    className,\n  ].join(' ')\n}\n/**\n * Primary UI component for user interaction\n */\nexport const Button = ({\n  type,\n  size,\n  label,\n  icon,\n  fullWidth,\n  align,\n  className,\n  children,\n  ...props\n}) => {\n  return (\n    <AntButton\n      className={getButtonClassName(\n        type,\n        size,\n        icon,\n        className,\n        !(label || children) && icon,\n        fullWidth,\n        align,\n      )}\n      icon={icon ? <Icon name={icon} className={size} /> : null}\n      {...props}\n    >\n      {label || children}\n    </AntButton>\n  )\n}\n\nButton.propTypes = {\n  /**\n   * This indicates what type of button should be rendered\n   */\n  type: PropTypes.oneOf(BUTTON_TYPES),\n  className: PropTypes.string,\n  /**\n   * How large should the button be?\n   */\n  size: PropTypes.oneOf(['small', 'default', 'large', 'extra-large']),\n  /**\n   * Button Text\n   */\n  label: PropTypes.string,\n\n  /**\n   * Material UI icon name taken from https://fonts.google.com/icons\n   */\n  icon: PropTypes.string,\n  /**\n   * Disable the button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Set to true, if the button needs to expand to full width of the container\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * How to align the text inside the button. Default is center.\n   */\n  align: PropTypes.oneOf(['left', 'right', 'center']),\n  children: PropTypes.any,\n}\n\nButton.defaultProps = {\n  size: 'default',\n  type: 'primary',\n}\n","export const TEXT_TYPES = [\n  { name: 'large-title', fontSize: '26px', lineHeight: '38px', fontWeight: 400 },\n  { name: 'title-1', fontSize: '22px', lineHeight: '32px', fontWeight: 400 },\n  { name: 'title-2', fontSize: '18px', lineHeight: '26px', fontWeight: 400 },\n  { name: 'title-3', fontSize: '16px', lineHeight: '24px', fontWeight: 400 },\n  { name: 'headline', fontSize: '14px', lineHeight: '20px', fontWeight: 600 },\n  { name: 'subtitle', fontSize: '12px', lineHeight: '18px', fontWeight: 500 },\n  { name: 'body', fontSize: '14px', lineHeight: '20px', fontWeight: 400 },\n  { name: 'caption', fontSize: '12px', lineHeight: '18px', fontWeight: 400 },\n  { name: 'caption-bold', fontSize: '12px', lineHeight: '18px', fontWeight: 600 },\n  { name: 'caption-italic', fontSize: '12px', lineHeight: '18px', fontWeight: 400 },\n  { name: 'caption-capital', fontSize: '12px', lineHeight: '18px', fontWeight: 600 },\n]\n","import React from 'react'\nimport { Typography } from 'antd'\nimport PropTypes from 'prop-types'\nimport './typography.scss'\nimport { TEXT_TYPES } from './TEXT_TYPES'\n\n/**\n * Typography for Contacto Apps\n */\nexport const Text = ({ type, children, className, variant, color, style, align, ...props }) => {\n  return (\n    <Typography.Text\n      className={[\n        'sg',\n        'contacto-typography',\n        type ? 'contacto-typography--' + type : '',\n        variant ? 'contacto-typography--' + variant : '',\n        align ? 'contacto-typography--' + align + ' contacto-typography--block' : '',\n        className,\n      ].join(' ')}\n      style={{ ...style, color: color ? `var(--${color})` : undefined }}\n      {...props}\n    >\n      {children}\n    </Typography.Text>\n  )\n}\n\nText.propTypes = {\n  /**\n   * This indicates the type of the text that is to be used\n   */\n  type: PropTypes.oneOf(TEXT_TYPES.map((type) => type.name)),\n  /**\n   * This indicates the children of the text node\n   */\n  children: PropTypes.any,\n\n  className: PropTypes.string,\n  /**\n   * This indicates whether the text is primary or secondary.\n   */\n  variant: PropTypes.string,\n  /**\n   * Color of the text. Please specify a variable name. Hex colors won't work here.\n   */\n  color: PropTypes.string,\n  /**\n   * CSS Style property\n   */\n  style: PropTypes.object,\n  /**\n   * Text align\n   */\n  align: PropTypes.oneOf(['left', 'right', 'center']),\n}\n\nText.defaultProps = {\n  type: 'body',\n}\n","import React from 'react'\nimport { Input } from 'antd'\nimport { Text } from '../Typography/index'\nimport PropTypes from 'prop-types'\nimport './textfield.scss'\n\nexport const TEXTFIELD_TYPES = ['input', 'search-box', 'no-shadow']\n/**\n * This is used to get text input from the user\n */\nexport const TextField = React.forwardRef(function TextField(\n  {\n    type,\n    label,\n    icon,\n    size,\n    disabled,\n    placeholder,\n    readOnly,\n    password,\n    noShadow,\n    className = '',\n    ...props\n  },\n  ref,\n) {\n  icon = type === 'search-box' ? 'search' : icon\n  const Tag = password ? Input.Password : Input\n  return (\n    <div className=\"sg contacto-input-wrapper\">\n      {label && (\n        <div className=\"contacto-input-label-wrapper\">\n          <Text type=\"caption-bold\">{label}</Text>\n        </div>\n      )}\n      <Tag\n        ref={ref}\n        className={[\n          'contacto-input',\n          'contacto-input--' + type,\n          'contacto-input--' + size,\n          noShadow ? 'contacto-input--no-shadow' : '',\n          readOnly ? 'contacto-input--readonly' : '',\n          className,\n        ].join(' ')}\n        disabled={readOnly || disabled}\n        placeholder={placeholder}\n        {...props}\n        prefix={\n          icon ? (\n            <span className=\"material-icons-round contacto-icon contacto-icon--input-prefix\">\n              {icon}\n            </span>\n          ) : null\n        }\n      />\n    </div>\n  )\n})\n\nTextField.propTypes = {\n  /**\n   * This indicates the type of textfield\n   */\n  type: PropTypes.oneOf(TEXTFIELD_TYPES),\n  className: PropTypes.string,\n  /**\n   * How large should the textfield be?\n   */\n  size: PropTypes.oneOf(['small', 'default', 'large']),\n  /**\n   * Placeholder Text\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Label for the Input\n   */\n  label: PropTypes.string,\n  /**\n   * Material UI icon name taken from https://fonts.google.com/icons\n   */\n  icon: PropTypes.string,\n  /**\n   * Disable the textfield\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Show the value as readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Set to true, if you don't want the shadow.\n   */\n  noShadow: PropTypes.bool,\n  /**\n   * Is it a password field?\n   */\n  password: PropTypes.bool,\n}\n\nTextField.defaultProps = {\n  size: 'default',\n  type: 'input',\n}\n","import React, { useRef } from 'react'\nimport './styles.scss'\nimport PropTypes from 'prop-types'\nimport { Card as AntCard, Space, Row } from 'antd'\nimport { Text } from '../Typography/index'\n\nconst Title = (props) => (\n  <>\n    <div>\n      <Text type=\"title-2\">{props.text}</Text>\n    </div>\n    {props.subtitle && (\n      <div className=\"contacto-card-subtitle\">\n        <Text variant=\"secondary\">{props.subtitle}</Text>\n      </div>\n    )}\n  </>\n)\n\nconst Section = React.forwardRef(function Section(props, ref) {\n  return (\n    <div\n      className={[\n        'contacto-card-section',\n        props.scrollY ? 'contacto-card-section--scroll-y' : '',\n        props.className || '',\n      ].join(' ')}\n      ref={ref}\n    >\n      {props.children}\n    </div>\n  )\n})\n\nconst Footer = (props) => {\n  const footerRef = useRef(null)\n  const cardBody = footerRef.current?.closest('.ant-card-body')\n  if (cardBody) cardBody.parentNode.insertBefore(footerRef.current, cardBody.nextSibling)\n  return (\n    <Section className=\"contacto-card-footer-section\" ref={footerRef}>\n      <Row justify=\"end\">\n        <Space size={16} direction=\"horizontal\">\n          {props.footerButtons.map((button) => button)}\n        </Space>\n      </Row>\n    </Section>\n  )\n}\n/**\n * This is a layout that is mostly used in the center, when the screen has a table.\n */\nexport const Card = ({\n  className = '',\n  title,\n  subtitle,\n  actionButton,\n  topAlignButton,\n  hasTableLayout,\n  ...props\n}) => {\n  return (\n    <AntCard\n      className={[\n        'sg contacto-card',\n        className,\n        topAlignButton ? 'contacto-card-align-top' : '',\n        hasTableLayout ? 'contacto-card--has-table-layout' : '',\n      ].join(' ')}\n      {...props}\n      title={<Title text={title} subtitle={subtitle} />}\n      extra={actionButton || null}\n    />\n  )\n}\n\nCard.Section = Section\nCard.Footer = Footer\n\nCard.propTypes = {\n  /**\n   * Class to be added\n   */\n  className: PropTypes.string,\n  /**\n   * Title of the card\n   */\n  title: PropTypes.any,\n  /**\n   * Text rendered beneath the title\n   */\n  subtitle: PropTypes.string,\n  /**\n   * The action button component. It must be a react component, usually, the Button component.\n   */\n  actionButton: PropTypes.node,\n  /**\n   * Should the button be top aligned with the header?\n   */\n  topAlignButton: PropTypes.bool,\n  /**\n   * If the card contains the default table view, set this to true\n   * for the scroll functionaltiy to work properly\n   */\n  hasTableLayout: PropTypes.bool,\n}\n\nCard.defaultProps = {}\n","import React from 'react'\nimport './styles.scss'\nimport PropTypes from 'prop-types'\nimport { Checkbox as AntCheckbox } from 'antd'\n\n/**\n * Primary Checkbox Component.\n *  Has the same properties that are used in antd.\n *  Visit https://ant.design/components/checkbox/#API for options\n */\nexport const Checkbox = ({ className = '', ...props }) => {\n  return <AntCheckbox className={['sg contacto-checkbox', className].join(' ')} {...props} />\n}\n\nconst CheckboxGroup = ({ className, ...props }) => (\n  <AntCheckbox.Group\n    className={[className, 'sg', 'contacto-checkbox-group'].join(' ')}\n    {...props}\n  />\n)\n\nCheckbox.Group = CheckboxGroup\n\nCheckbox.propTypes = {\n  /**\n   * Class to be added\n   */\n  className: PropTypes.string,\n}\n","import React from 'react'\nimport './styles.scss'\nimport PropTypes from 'prop-types'\nimport { Tag as AntTag } from 'antd'\nimport { Text } from '../Typography/index'\n\nexport const TAG_TYPES = ['success', 'danger', 'disabled', 'progress', 'default']\n/**\n * Tag component that is used to specify status of a task\n */\nexport const Tag = ({ className = '', type, label, children, ...props }) => {\n  return (\n    <AntTag\n      className={['sg contacto-tag', className, `contacto-tag--${type}`].join(' ')}\n      {...props}\n    >\n      <Text type={type === 'default' ? 'caption' : 'caption-capital'}>{label || children}</Text>\n    </AntTag>\n  )\n}\n\nTag.propTypes = {\n  /**\n   * Class to be added\n   */\n  className: PropTypes.string,\n  /**\n   * The type of tag\n   */\n  type: PropTypes.oneOf(TAG_TYPES),\n  /**\n   * The text to be displayed\n   */\n  label: PropTypes.string,\n  children: PropTypes.any,\n}\n\nTag.defaultProps = {\n  type: 'default',\n}\n","import React from 'react'\nimport './styles.scss'\nimport { Radio as AntRadio } from 'antd'\nimport PropTypes from 'prop-types'\n/**\n * Primary Radio Component.\n *  Has the same properties that are used in antd.\n *  Visit https://ant.design/components/radio/#API for options\n */\nexport const Radio = ({ className = '', ...props }) => {\n  return <AntRadio className={['sg contacto-radio-input', className].join(' ')} {...props} />\n}\nRadio.Group = AntRadio.Group\nRadio.Button = AntRadio.Button\n\nRadio.propTypes = {\n  className: PropTypes.string,\n}\n","import React from 'react'\nimport { Select as AntSelect } from 'antd'\nimport { Text } from '../Typography/index'\nimport PropTypes from 'prop-types'\nimport './select.scss'\nimport { Icon } from '../Icon/index'\n/**\n * This is used to select a value from the list of options\n */\nexport const Select = React.forwardRef(function Select(\n  {\n    label,\n    icon,\n    disabled,\n    placeholder,\n    readOnly,\n    className,\n    dropdownClassName,\n    listHeight,\n    size,\n    onIconClick,\n    loading,\n    noShadow,\n    ...props\n  },\n  ref,\n) {\n  return (\n    <div className={'sg contacto-select-wrapper ' + className}>\n      {label && (\n        <div className=\"contacto-select-label-wrapper\">\n          <Text type=\"caption-bold\">{label}</Text>\n        </div>\n      )}\n      <AntSelect\n        className={[\n          'contacto-select',\n          readOnly ? 'contacto-select--readonly' : '',\n          noShadow ? 'contacto-select--no-shadow' : '',\n          `contacto-select--${size}`,\n        ]}\n        ref={ref}\n        disabled={readOnly || disabled}\n        listHeight={listHeight || 220}\n        placeholder={placeholder}\n        dropdownClassName={['sg contacto-select-listbox', dropdownClassName].join(' ')}\n        suffixIcon={\n          loading ? (\n            <Icon.Loading />\n          ) : (\n            <span\n              className=\"material-icons-round contacto-icon--select-caret\"\n              onClick={onIconClick}\n            >\n              expand_more\n            </span>\n          )\n        }\n        {...props}\n      />\n    </div>\n  )\n})\n\nSelect.Option = AntSelect.Option\n\nSelect.propTypes = {\n  /**\n   * How large should the textfield be?\n   */\n  size: PropTypes.oneOf(['small', 'default', 'large']),\n  /**\n   * Placeholder Text\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Label for the Input\n   */\n  label: PropTypes.string,\n  /**\n   * Material UI icon name taken from https://fonts.google.com/icons\n   */\n  icon: PropTypes.string,\n  /**\n   * Disable the textfield\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Show the value as readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Class name to be added\n   */\n  className: PropTypes.string,\n  /**\n   * Class name to be added for the list-box\n   */\n  dropdownClassName: PropTypes.string,\n  /**\n   * Height of the dropdown listbox\n   */\n  listHeight: PropTypes.number,\n  /**\n   * Show the loader\n   */\n  loading: PropTypes.bool,\n  /**\n   * Click handler for the icon\n   */\n  onIconClick: PropTypes.func,\n  /**\n   * Set it to true to remove shadow\n   */\n  noShadow: PropTypes.bool,\n}\n\nSelect.defaultProps = {\n  size: 'default',\n}\n","import React from 'react'\nimport './styles.scss'\nimport PropTypes from 'prop-types'\nimport { Table as AntTable } from 'antd'\n\n/**\n * The default table that is used in the application.\n * The pagination, cell padding, header and scroll behaviour has been standardised.\n * The options are similar to that of antd table\n */\n// eslint-disable-next-line react/prop-types\nexport const Table = ({ className = '', pagination, ...props }) => {\n  let modifiedPagination = {\n    ...pagination,\n    showSizeChanger: false,\n    showTotal(total, range) {\n      return `${range[0]}-${range[1]} of ${total}`\n    },\n    itemRender(page, type) {\n      if (type === 'prev' || type === 'next') {\n        return (\n          <span className=\"material-icons-round\">{`navigate_${\n            type === 'prev' ? 'before' : type\n          }`}</span>\n        )\n      }\n    },\n  }\n  return (\n    <AntTable\n      className={['sg contacto-table', className].join(' ')}\n      scroll={{ y: true }}\n      pagination={pagination !== false && modifiedPagination}\n      {...props}\n    />\n  )\n}\n\nTable.propTypes = {\n  /**\n   * Class to be added\n   */\n  className: PropTypes.string,\n}\n","import React from 'react'\nimport './styles.scss'\nimport PropTypes from 'prop-types'\nimport { Space, Row } from 'antd'\nimport { Card } from '../Card/index'\n\n/**\n * A common table layout\n *\n */\nexport const TableLayout = ({ className = '', table, searchBar, actionButtons }) => {\n  return (\n    <Card.Section className=\"contacto-table-layout-card-section\">\n      <div className={['sg contacto-table-layout', className].join(' ')}>\n        <Row justify=\"space-between\" className=\"contacto-table-layout--controls\">\n          <Space direction=\"horizontal\" size={16}>\n            <div className=\"contacto-table-layout--search-bar\">{searchBar}</div>\n            {!!actionButtons?.length &&\n              actionButtons.map((actionButtons, i) => (\n                <div className=\"contacto-table-layout--action-button\" key={i}>\n                  {actionButtons}\n                </div>\n              ))}\n          </Space>\n        </Row>\n        <div className=\"contacto-table-wrapper\">{table}</div>\n      </div>\n    </Card.Section>\n  )\n}\n\nTableLayout.propTypes = {\n  /**\n   * Class to be added\n   */\n  className: PropTypes.string,\n  /**\n   * Please provide a table from this same package for this layout to work properly.\n   */\n  table: PropTypes.node,\n  /**\n   * Provide a TextField that will be used as a searchbar.\n   */\n  searchBar: PropTypes.node,\n  /**\n   * Action buttons on the table, each separated by 16px\n   */\n  actionButtons: PropTypes.arrayOf(PropTypes.node),\n}\n","import React, { useEffect, useRef } from 'react'\nimport './styles.scss'\nimport PropTypes from 'prop-types'\nimport { Layout, Row, Col } from 'antd'\nimport { Text } from '../Typography/index'\n\n/**\n * Default sider with the title, close button and standard footer layout.\n */\nexport const Sider = ({\n  className = '',\n  noPadding,\n  title,\n  onClose,\n  children,\n  footerButtons,\n  ...props\n}) => {\n  const siderRef = useRef(null)\n  useEffect(() => {\n    siderRef.current && siderRef.current.parentElement.classList.add('ant-layout-has-sider')\n  }, [])\n  return (\n    <Layout.Sider\n      ref={siderRef}\n      className={[\n        'sg contacto-sider',\n        className,\n        noPadding ? 'contacto-sider--no-padding' : '',\n      ].join(' ')}\n      width={464}\n      collapsedWidth={0}\n      {...props}\n    >\n      <div className=\"contacto-sider-children\">\n        <div className=\"contacto-sider-title\">\n          <Row justify=\"space-between\">\n            <Col span={22}>\n              <Text type=\"title-2\">{title}</Text>\n            </Col>\n            <span className=\"material-icons-round contacto-sider-close-icon\" onClick={onClose}>\n              close\n            </span>\n          </Row>\n        </div>\n        <div className=\"contacto-sider-content\">{children}</div>\n        {!!footerButtons?.length && (\n          <div className=\"contacto-sider-footer\">{footerButtons.map((button) => button)}</div>\n        )}\n      </div>\n    </Layout.Sider>\n  )\n}\n\nSider.propTypes = {\n  /**\n   * Class to be added\n   */\n  className: PropTypes.string,\n  /**\n   * Set this to true, to have 0 padding on the sider and individual padding on the content.\n   * This is mostly used for long content which would require scroll.\n   */\n  noPadding: PropTypes.bool,\n  /**\n   * Title of the sider\n   */\n  title: PropTypes.string,\n  /**\n   * Function handler that is called on clicking the close button\n   */\n  onClose: PropTypes.func,\n  /**\n   * React children\n   */\n  children: PropTypes.any,\n  /**\n   * An array of buttons that would be rendered with default spaing on the bottom of the footer.\n   */\n  footerButtons: PropTypes.any,\n}\n\nSider.defaultProps = {}\n","import React, { useEffect, useRef } from 'react'\nimport './styles.scss'\nimport PropTypes from 'prop-types'\n\nconst Column = (props) => {\n  const columnRef = useRef(null)\n  useEffect(() => {\n    if (props.spacing?.length && columnRef.current?.children.length) {\n      Array.from(columnRef.current?.children).forEach(\n        (child, i) => (child.style.marginBottom = `${props.spacing[i % props.spacing.length]}px`),\n      )\n    }\n  }, [props.spacing])\n  return (\n    <div\n      className={[\n        'sg contacto-block contacto-block-column',\n        props.className,\n        props.align ? `contacto-block-column--${props.align}` : '',\n      ].join(' ')}\n      ref={columnRef}\n    >\n      {props.children}\n    </div>\n  )\n}\n/**\n * A block element which provides spacing options like margin-bottom and margin-top.\n * This helps in accurate spacing.\n */\nexport const Block = ({ className = '', spacing, style, ...props }) => {\n  return (\n    <div\n      className={['sg contacto-block', className].join(' ')}\n      style={{ ...style, marginTop: spacing?.[1], marginBottom: spacing?.[0] }}\n      {...props}\n    />\n  )\n}\n\nBlock.Column = Column\n\nBlock.propTypes = {\n  /**\n   * Class name to be added\n   */\n  className: PropTypes.string,\n  /**\n   * The [margin-bototm, margin-top] value specified as an array\n   */\n  spacing: PropTypes.array,\n  /**\n   * CSS Style object\n   */\n  style: PropTypes.object,\n}\n\nBlock.defaultProps = {}\n"],"names":["styleInject","css","ref","head","insertAt","document","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Loading","size","strokeSize","color","React","className","width","height","boxShadow","Icon","name","hoverColor","props","useState","undefined","iconColor","setIconColor","iconEventProps","onMouseEnter","onMouseLeave","join","fontSize","cursor","overflow","maxHeight","maxWidth","lineHeight","propTypes","PropTypes","string","number","object","defaultProps","BUTTON_TYPES","getButtonClassName","icon","onlyIcon","fullWidth","align","Button","label","children","AntButton","oneOf","disabled","bool","any","TEXT_TYPES","fontWeight","Text","variant","Typography","map","TEXTFIELD_TYPES","TextField","forwardRef","placeholder","readOnly","password","noShadow","Tag","Input","Password","prefix","Title","text","subtitle","Section","scrollY","Footer","footerRef","useRef","cardBody","current","_footerRef$current","closest","parentNode","nextSibling","Row","justify","Space","direction","footerButtons","button","Card","title","actionButton","topAlignButton","hasTableLayout","AntCard","extra","node","Checkbox","AntCheckbox","CheckboxGroup","Group","TAG_TYPES","AntTag","Radio","AntRadio","Select","dropdownClassName","listHeight","onIconClick","loading","AntSelect","suffixIcon","onClick","Option","func","Table","pagination","modifiedPagination","showSizeChanger","showTotal","total","range","itemRender","page","AntTable","scroll","y","TableLayout","table","searchBar","actionButtons","length","i","key","arrayOf","Sider","noPadding","onClose","siderRef","useEffect","parentElement","classList","add","Layout","collapsedWidth","Col","span","Column","columnRef","spacing","_columnRef$current","Array","from","_columnRef$current2","forEach","child","marginBottom","Block","marginTop","array"],"mappings":"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"}